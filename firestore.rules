rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user's auth token contains the clubId claim.
    function isUserOfClub(clubId) {
      // This allows access if the user document in the root /users collection
      // links them to the correct clubId. This read is secure.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clubId == clubId;
    }

    // Allow new club and associated data creation by anyone (during sign-up).
    // This is safe because it only allows creation, not reading or updating existing data.
    match /clubs/{clubId} {
      allow create; // Anyone can create a club.
      
      // Allow creation of essential subcollections during sign-up.
      match /users/{userId} {
        allow create;
      }
      match /settings/{settingId} {
        allow create;
      }
    }
    
    // Once a club is created, secure its data.
    match /clubs/{clubId}/{allPaths=**} {
        // Only a user who belongs to the club can read or write its data.
        allow read, write: if isUserOfClub(clubId);
    }
    
    // Allow any authenticated user to create their own user document in the root collection.
    // This happens during sign-up.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;

      // Only the user themselves can read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Nobody can update or delete user records from here. This must be managed server-side.
      allow update, delete: if false;
    }
  }
}
