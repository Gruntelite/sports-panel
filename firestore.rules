
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to a club
    function isUserOfClub(clubId) {
      // Check if a user document exists for the requesting user's UID
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             // Check if the clubId in that user document matches the one being accessed
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clubId == clubId;
    }

    // Rules for the root `users` collection which links auth UIDs to club IDs
    match /users/{userId} {
      // A user can create their OWN user document, but only if it doesn't exist yet.
      allow create: if request.auth != null && request.auth.uid == userId;
      // A user can read their OWN user document.
      allow read: if request.auth != null && request.auth.uid == userId;
      // No one can update or delete these critical link documents.
      allow update, delete: if false;
    }

    // Rules for the `clubs` collection
    match /clubs/{clubId} {
      // Allow a user to create a club document if they are authenticated
      // and they are setting themselves as the adminId. This is key for sign-up.
      allow create: if request.auth != null && request.resource.data.adminId == request.auth.uid;

      // Allow read and write operations on a club and all its subcollections
      // ONLY if the requesting user belongs to that club.
      allow read, write: if isUserOfClub(clubId);

      match /{allPaths=**} {
        allow read, write: if isUserOfClub(clubId);
      }
    }
  }
}
