
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user's UID is linked to a specific clubId
    function isUserOfClub(clubId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clubId == clubId;
    }

    // Rules for the root `users` collection which links auth UIDs to club IDs
    match /users/{userId} {
      // Any authenticated user can create their own user record, but only once.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Any authenticated user can read their own user record to find their clubId.
      allow read: if request.auth != null && request.auth.uid == userId;
      // Nobody can update or delete these records to prevent tampering.
      allow update, delete: if false;
    }

    // Rules for the `clubs` collection
    match /clubs/{clubId} {
      // A user can create a new club document if they are authenticated
      // and the club's adminId matches their own UID.
      allow create: if request.auth != null && request.resource.data.adminId == request.auth.uid;

      // A user can read/write to a club and its subcollections if they belong to that club.
      allow read, write: if isUserOfClub(clubId);

      match /{allPaths=**} {
        allow read, write: if isUserOfClub(clubId);
      }
    }
  }
}
