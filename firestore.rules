rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user belongs to the specified club
    function isUserOfClub(clubId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clubId == clubId;
    }

    // The `users` collection links a user's auth ID to their club ID
    match /users/{userId} {
      // Allow a user to create their own user document, and only their own.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow a user to read their own document to find out their clubId.
      allow read: if request.auth != null && request.auth.uid == userId;
      // Disallow updates and deletes to prevent users from changing their club affiliation.
      allow update, delete: if false;
    }

    // The `clubs` collection contains all data for each club
    match /clubs/{clubId}/{documents=**} {
        // Allow reads and writes to any document inside a club's collection
        // ONLY if the user is a member of that club.
        allow read, write: if isUserOfClub(clubId);
    }

    // Allow a newly authenticated user to create their club's main document.
    // This is separate from the rule above because `isUserOfClub` would be false
    // during this initial creation step.
    match /clubs/{clubId} {
      allow create: if request.auth != null;
    }
  }
}
